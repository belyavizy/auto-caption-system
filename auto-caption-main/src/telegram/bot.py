import os
import re

import requests as rq

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from src.telegram.constants import HELP, API_URL
from src.telegram.markups import main_menu, inline_menu, inline_edit_menu
from src.telegram.states_group import ProfileStatesGroup
from src.telegram.utils import show_people, error_message, parse_filename
import src.app as app


class AutoCaptionTelegramBot:
    async def cmd_start(self, message: types.Message):
        await message.answer(f"Boom! üí• –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏ /help",
                             reply_markup=main_menu)
        await message.delete()

    async def cmd_help(self, message: types.Message):
        await message.answer(HELP, reply_markup=main_menu, parse_mode='HTML')
        await message.delete()

# --------------------------------------------–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥—É-----------------------------------------------------
    async def cmd_reg(self, message: types.Message):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!",
                             reply_markup=inline_menu)
        await ProfileStatesGroup.reg_name.set()

    async def cmd_reg_name(self, message: types.Message, state: FSMContext):
        is_team = rq.get(API_URL + 'check/is_team', params={'name': message.text}).json()
        if is_team['status'] == 'success':
            if is_team['data']:
                async with state.proxy() as data:
                    data['reg_name'] = message.text
                await message.answer("–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=inline_menu)
                await ProfileStatesGroup.next()
            else:
                await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
                                     reply_markup=inline_menu)
        else:
            await error_message(message, is_team['details'], state, main_menu)

    async def cmd_reg_password(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            reg_name = data['reg_name']
            is_password = rq.get(API_URL + 'check/password',
                                 params={'password': message.text,
                                         'name': reg_name}
                                 ).json()
        if is_password['status'] == 'success':
            if is_password['data']['is_password']:
                resp = rq.post(API_URL + 'update/user',
                               params={
                                   'team_id': is_password['data']['team_id'],
                                   'user_id': message.from_id
                               }
                               ).json()
                if resp['status'] == 'success':
                    await message.answer("–í—ã –≤–æ—à–ª–∏!", reply_markup=main_menu)
                    await state.finish()
                else:
                    await error_message(message, resp['details'], state, main_menu)
            else:
                await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!", reply_markup=inline_menu)
        else:
            await error_message(message, is_password['details'], state, main_menu)
# --------------------------------------------–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥—É-----------------------------------------------------

# --------------------------------------------–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã----------------------------------------------------------
    async def cmd_create(self, message: types.Message):
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!",
                             reply_markup=inline_menu)
        await ProfileStatesGroup.crt_name.set()

    async def cmd_create_name(self, message: types.Message, state: FSMContext):
        is_team = rq.get(API_URL + 'check/is_team', params={'name': message.text}).json()
        if is_team['status'] == 'success':
            if is_team['data']:
                await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!",
                                     reply_markup=inline_menu)
            else:
                async with state.proxy() as data:
                    data['crt_name'] = message.text
                await message.answer("–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=inline_menu)
                await ProfileStatesGroup.next()
        else:
            await error_message(message, is_team['details'], state, main_menu)

    async def cmd_create_password(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            add_team = rq.post(API_URL + 'update/add_team',
                               params={
                                   'user_id': message.from_id,
                                   'name': data['crt_name'],
                                   'password': message.text
                               }).json()
        if add_team['status'] == 'success':
            await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É!",
                                 reply_markup=main_menu)
            await state.finish()
        else:
            await error_message(message, add_team['details'], state, main_menu)
# --------------------------------------------–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã----------------------------------------------------------

# --------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-----------------------------------------------------------
    async def cmd_add(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                await message.reply("–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
                                    reply_markup=inline_menu)
                await ProfileStatesGroup.add_name.set()
                state = Dispatcher.get_current().current_state()
                async with state.proxy() as data:
                    data['team_id'] = get_team['data']
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def cmd_add_name(self, message: types.Message, state: FSMContext):
        check_name = rq.get(API_URL + 'check/name', params={'name': message.text}).json()
        if check_name['status'] == 'success':
            if check_name['data']:
                async with state.proxy() as data:
                    data['add_name'] = message.text
                await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ —á–µ–ª–æ–≤–µ–∫–∞!",
                                     reply_markup=inline_menu)
                await ProfileStatesGroup.next()
            else:
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
                    reply_markup=inline_menu)
        else:
            await error_message(message, check_name['details'], state, main_menu)

    async def cmd_add_photo(self, message: types.Message, state: FSMContext):
        photo_file = await message.photo[-1].download()
        photo_file.close()
        check_photo = rq.get(API_URL + 'check/photo', params={'path': photo_file.name}).json()
        if check_photo['status'] == 'success':
            if check_photo['data'] > 1:
                await message.answer(f"‚ö†Ô∏è –í –∫–∞–¥—Ä–µ –±–æ–ª—å—à–µ 1 —á–µ–ª–æ–≤–µ–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!",
                                     reply_markup=inline_menu)
            elif check_photo['data'] == 0:
                await message.answer(f"‚ö†Ô∏è –õ–∏—Ü–æ –Ω–µ –±—ã–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!",
                                     reply_markup=inline_menu)
            else:
                async with state.proxy() as data:
                    add_photo = rq.post(API_URL + 'update/photo',
                                        params={
                                            'path': os.path.abspath(photo_file.name),
                                            'name': data['add_name'],
                                            'team_id': data['team_id']
                                        }).json()
                if add_photo['status'] == 'success':
                    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                                         reply_markup=main_menu)
                    await state.finish()
                else:
                    await error_message(message, add_photo['details'], state, main_menu)
        else:
            await error_message(message, check_photo['details'], state, main_menu)

# --------------------------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-----------------------------------------------------------

# --------------------------------------------–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-------------------------------------------------------------
    async def cmd_del(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_people = rq.get(API_URL + 'get/people', params={'team_id': get_team['data']}).json()
                if get_people['status'] == 'success':
                    if len(get_people['data']) > 0:
                        await show_people(message, get_people['data'], main_menu)
                        await message.answer(
                            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(get_people['data'])}), "
                            f"–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                            reply_markup=inline_menu)
                        await ProfileStatesGroup.delete_photo.set()

                        state = Dispatcher.get_current().current_state()
                        async with state.proxy() as data:
                            data['people'] = get_people['data']
                    else:
                        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
                else:
                    await error_message(message, get_people['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def del_photo(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            people = data['people']

        if re.fullmatch('\\d+', message.text):
            idx = int(message.text) - 1

            if idx <= -1 or idx >= len(people):
                await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(people)}",
                                     reply_markup=inline_menu)
            else:
                delete_photo = rq.delete(API_URL + 'delete/photo',
                                         params={
                                             'path': people[idx]
                                         }).json()
                if delete_photo['status'] == 'success':
                    person = '_'.join(people[idx].split('/')[-1].split('_')[0:2])
                    await message.answer(f"–§–æ—Ç–æ ‚Ññ{idx + 1}({person}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
                                         reply_markup=main_menu)
                    await state.finish()
                else:
                    await error_message(message, delete_photo['details'], state, main_menu)
        else:
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
                reply_markup=inline_menu)

# --------------------------------------------–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ-------------------------------------------------------------

# --------------------------------------------–í—ã–≤–æ–¥ –≤—Å–µ—Ö----------------------------------------------------------------
    async def cmd_show_all_people(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_people = rq.get(API_URL + 'get/people', params={'team_id': get_team['data']}).json()
                if get_people['status'] == 'success':
                    if len(get_people['data']) > 0:
                        await show_people(message, get_people['data'], main_menu)
                    else:
                        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
                else:
                    await error_message(message, get_people['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

# --------------------------------------------–í—ã–≤–æ–¥ –≤—Å–µ—Ö----------------------------------------------------------------

# --------------------------------------------–í—ã–≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–æ—Ç–æ---------------------------------------------------
    async def cmd_show_person(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_people = rq.get(API_URL + 'get/people', params={'team_id': get_team['data']}).json()
                if get_people['status'] == 'success':
                    if len(get_people['data']) > 0:
                        await show_people(message, get_people['data'], main_menu)
                        await message.answer(
                            f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(get_people['data'])}),"
                            f"—Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            reply_markup=inline_menu)
                        await ProfileStatesGroup.select_person.set()
                        state = Dispatcher.get_current().current_state()
                        async with state.proxy() as data:
                            data['people'] = get_people['data']
                    else:
                        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
                else:
                    await error_message(message, get_people['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def cmd_show_person_photo(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            people = data['people']

        if re.fullmatch('\\d+', message.text):
            idx = int(message.text) - 1

            if idx <= -1 or idx >= len(people):
                await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(people)}",
                                     reply_markup=inline_menu)
            else:
                print(people[idx])
                with open(people[idx], "rb") as photo:
                    full_name, role = parse_filename('_'.join(people[idx].split('/')[-1].split('_')[0:2]))
                    await message.answer_photo(photo, caption=f"{full_name} -- {role}")
                await state.finish()
        else:
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}), "
                f"—Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                reply_markup=inline_menu)

# --------------------------------------------–í—ã–≤–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ñ–æ—Ç–æ---------------------------------------------------

# --------------------------------------------–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è---------------------------------------------------------
    async def cmd_edit(self, message: types.Message):
        await message.answer("–ö–Ω–æ–ø–∫–∞ –µ—â—ë –Ω–µ –¥–æ–¥–µ–ª–∞–Ω–∞!", reply_markup=main_menu)
        # get_team = rq.get(API_URL + 'get/team_by_user',params={'user_id': message.from_id}).json()
        # if get_team['status'] == 'success':
        #     if get_team['data'] is None:
        #         await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
        #                              reply_markup=main_menu)
        #     else:
        #         get_people = rq.get(API_URL + 'get/people', params={'team_id': get_team['data']}).json()
        #         if get_people['status'] == 'success':
        #             if len(get_people['data']) > 0:
        #                 await show_people(message, get_people['data'], main_menu)
        #                 await message.answer(
        #                     f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(get_people['data'])}),"
        #                     f"—Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
        #                     reply_markup=inline_menu)
        #                 await ProfileStatesGroup.edit_idx.set()
        #                 state = Dispatcher.get_current().current_state()
        #                 async with state.proxy() as data:
        #                     data['people'] = get_people['data']
        #             else:
        #                 await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
        #         else:
        #             await error_message(message, get_people['details'], None, main_menu)
        # else:
        #     await error_message(message, get_team['details'], None, main_menu)

    async def cmd_edit_idx(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            people = data['people']

        if re.fullmatch('\\d+', message.text):
            idx = int(message.text) - 1

            if idx <= -1 or idx >= len(people):
                await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(people)}",
                                     reply_markup=inline_menu)
            else:
                async with state.proxy() as data:
                    data['edit_name'] = people[idx]
                await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                                     reply_markup=inline_edit_menu)
        else:
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç 1 –¥–æ {len(people)}),"
                f" —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                reply_markup=inline_menu)

    async def cmd_edit_name(self, message: types.Message, state: FSMContext):
        check_name = rq.get(API_URL + 'check/name', params={'name': message.text}).json()
        if check_name['status'] == 'success':
            if check_name['data']:
                async with state.proxy() as data:
                    pass
                await message.answer("–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!")
                await state.finish()
            else:
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)",
                    reply_markup=inline_menu)
        else:
            await error_message(message, check_name['details'], state, main_menu)

# --------------------------------------------–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è---------------------------------------------------------

# --------------------------------------------OBS config----------------------------------------------------------------
    async def cmd_obs(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                state = Dispatcher.get_current().current_state()
                async with state.proxy() as data:
                    data['team_id'] = get_team['data']
                await message.answer("–í–≤–µ–¥–∏—Ç–µ ip OBS —Å–µ—Ä–≤–µ—Ä–∞! (–ü—Ä–∏–º–µ—Ä: 192.168.12.197)",
                                     reply_markup=inline_menu)
                await ProfileStatesGroup.set_ip.set()
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def cmd_obs_host(self, message: types.Message, state: FSMContext):
        check_host = rq.get(API_URL + 'check/ipv4', params={'ip': message.text}).json()
        if check_host['status'] == 'success':
            if check_host['data']:
                async with state.proxy() as data:
                    data['host'] = message.text
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç OBS —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç 1 –¥–æ 65535! (–ü—Ä–∏–º–µ—Ä: 4445)", reply_markup=inline_menu)
                await ProfileStatesGroup.next()
            else:
                await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ip! –í–≤–µ–¥–∏—Ç–µ ip OBS —Å–µ—Ä–≤–µ—Ä–∞! (–ü—Ä–∏–º–µ—Ä: 192.168.12.197)",
                                     reply_markup=inline_menu)
        else:
            await error_message(message, check_host['details'], state, main_menu)

    async def cmd_obs_port(self, message: types.Message, state: FSMContext):
        check_host = rq.get(API_URL + 'check/port', params={'port': message.text}).json()
        if check_host['status'] == 'success':
            if check_host['data']:
                async with state.proxy() as data:
                    data['port'] = int(message.text)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ OBS —Å–µ—Ä–≤–µ—Ä—É!", reply_markup=inline_menu)
                await ProfileStatesGroup.next()
            else:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç OBS —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç 1 –¥–æ 65535! (–ü—Ä–∏–º–µ—Ä: 4445)",
                    reply_markup=inline_menu)
        else:
            await error_message(message, check_host['details'], state, main_menu)

    async def cmd_obs_password(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            set_obs_config = rq.post(API_URL + 'update/obs_config',
                                     params={
                                         'host': data['host'],
                                         'port': data['port'],
                                         'password': message.text,
                                         'team_id': data['team_id']
                                     }).json()
            if set_obs_config['status'] == 'success':
                await message.answer("OBS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!",
                                     reply_markup=main_menu)
                await message.answer(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: host:\n{data['host']},\nport: {data['port']},\n–ø–∞—Ä–æ–ª—å: {message.text[0]}***"
                )
                await message.delete()
                await state.finish()
            else:
                await error_message(message, set_obs_config['details'], state, main_menu)

# --------------------------------------------OBS config----------------------------------------------------------------

# --------------------------------------------OBS config show-----------------------------------------------------------
    async def cmd_show_obs(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_obs = rq.get(API_URL + 'get/obs_config', params={'team_id': get_team['data']}).json()
                if get_obs['status'] == 'success':
                    if len(get_obs['data']) == 0:
                        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ obs config!",
                                             reply_markup=main_menu)
                    else:
                        dct = get_obs['data'][0]
                        host, port = dct['host'], dct['port']
                        await message.answer(f"Host: {host}, port: {port}!")
                else:
                    await error_message(message, get_obs['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)
# --------------------------------------------OBS config show-----------------------------------------------------------

# --------------------------------------------Choose template-----------------------------------------------------------
    async def cmd_choose_template(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_templates = rq.get(API_URL + 'get/templates').json()
                if get_templates['status'] == 'success':
                    state = Dispatcher.get_current().current_state()
                    async with state.proxy() as data:
                        data['team_id'] = get_team['data']
                        data['templates'] = get_templates['data']
                    for i, template in enumerate(get_templates['data']):
                        path = 'src/templates/' + template + '.jpg'
                        with open(path, 'rb') as photo:
                            await message.answer_photo(photo, caption=f"{i + 1}) {template}")
                    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(get_templates['data'])}!",
                                         reply_markup=inline_menu)
                    await ProfileStatesGroup.set_template.set()
                else:
                    await error_message(message, get_templates['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def cmd_choose_template_set(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            team_id = data['team_id']
            templates = data['templates']
        if re.fullmatch('\\d+', message.text):
            idx = int(message.text) - 1

            if idx <= -1 or idx >= 3:
                await message.answer(f"‚ö†Ô∏è –ß–∏—Å–ª–æ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ {len(templates)}",
                                     reply_markup=inline_menu)
            else:
                set_template = rq.post(API_URL + 'update/template_team',
                                       params={
                                           'team_id': team_id,
                                           'template_id': idx
                                       }).json()
                if set_template['status'] == 'success':
                    await message.answer("–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —à–∞–±–ª–æ–Ω!", reply_markup=main_menu)
                    await state.finish()
                else:
                    await error_message(message, set_template['details'], state, main_menu)
        else:
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ (–æ—Ç 1 –¥–æ {len(templates)}),"
                f" —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                reply_markup=inline_menu)

# --------------------------------------------Choose template-----------------------------------------------------------

# --------------------------------------------–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ------------------------------------------------------
    async def cmd_start_rec(self, message: types.Message):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            if get_team['data'] is None:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                                     reply_markup=main_menu)
            else:
                get_people = rq.get(API_URL + 'get/people', params={'team_id': get_team['data']}).json()
                if get_people['status'] == 'success':
                    if len(get_people['data']) > 0:
                        get_template = rq.get(API_URL + 'get/template_by_team',
                                              params={'team_id': get_team['data']}).json()
                        if get_template['status'] == 'success':
                            if get_template['data'] is not None:
                                app.add_rec(get_team['data'], get_people['data'], get_template['data'])
                                await message.answer("–í–≤–µ–¥–∏—Ç–µ uri –≤–∞—à–µ–π –∫–∞–º–µ—Ä—ã (–ü—Ä–∏–º–µ—Ä: rtsp://192.168.1.11:554/live)",
                                                     reply_markup=inline_menu)
                                await ProfileStatesGroup.uri.set()

                                state = Dispatcher.get_current().current_state()
                                async with state.proxy() as data:
                                    data['team_id'] = get_team['data']
                            else:
                                await message.answer("–£ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞!",
                                                     reply_markup=main_menu)
                        else:
                            await error_message(message, get_template['details'], None, main_menu)
                    else:
                        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ –ª—é–¥–µ–π!", reply_markup=main_menu)
                else:
                    await error_message(message, get_people['details'], None, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

    async def cmd_start_rec_rtsp(self, message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            start_rec = rq.post(API_URL + 'start_recognition',
                                params={
                                    'rtsp': message.text,
                                    'team_id': data['team_id']
                                }).json()
        if start_rec['status'] == 'success':
            await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å", reply_markup=main_menu)
            await ProfileStatesGroup.next()
        else:
            await error_message(message, start_rec['details'], state, main_menu)

# --------------------------------------------–ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ-----------------------------------------------------

# --------------------------------------------–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ---------------------------------------------------
    async def cmd_end_rec(self, message: types.Message, state: FSMContext):
        get_team = rq.get(API_URL + 'get/team_by_user', params={'user_id': message.from_id}).json()
        if get_team['status'] == 'success':
            end_rec = rq.post(API_URL + 'end_recognition',
                              params={
                                  'team_id': get_team['data']
                              }).json()
            if end_rec['status'] == 'success':
                app.del_rec(get_team['data'])
                await message.answer("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!",
                                     reply_markup=main_menu)
                await state.finish()
            else:
                await error_message(message, end_rec['details'], state, main_menu)
        else:
            await error_message(message, get_team['details'], None, main_menu)

# --------------------------------------------–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ---------------------------------------------------

    async def callback_cancel(self, callback: types.CallbackQuery, state: FSMContext):
        if callback.data == 'cancel':
            await state.finish()
            await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
        elif callback.data == 'name':
            await callback.answer(
                "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è-–†–æ–ª—å (e.g. –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤-–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)")
            await ProfileStatesGroup.edit_name.set()

    async def cmd_strange_message(self, message: types.Message):
        await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É! –ù–µ –ø–∏—à–∏ —Å–∞–º –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–≥–æ —Å–¥–µ–ª–∞–Ω—ã?üò°",
                             reply_markup=main_menu)
